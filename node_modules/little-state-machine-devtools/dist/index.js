import * as React from 'react';
import { useState as useState$1, createElement, useRef, useEffect } from 'react';
import { useStateMachine } from 'little-state-machine';
import { Animate } from 'react-simple-animate';

const STATE_MACHINE_DEV_TOOL_CONFIG = '___STATE_MACHINE_DEV_CONFIG__';
const COLORS = {
    primary: '#0a1c2c',
    secondary: 'rgb(17, 50, 76)',
};
const Z_INDEX = {
    top: 99999998,
    second: 99999999,
};

function saveSetting(setting) {
    try {
        const config = window.localStorage.getItem(STATE_MACHINE_DEV_TOOL_CONFIG);
        window.localStorage.setItem(STATE_MACHINE_DEV_TOOL_CONFIG, config
            ? JSON.stringify(Object.assign(Object.assign({}, JSON.parse(config)), setting))
            : JSON.stringify(setting));
    }
    catch (_a) { }
}

const DevToolActionPanel = ({ setStateIndex, stateIndex, actions, config, }) => {
    const [filterName, setFilterName] = useState$1(config.filterAction);
    return (createElement("div", { style: {
            borderRight: '1px solid #11324c',
        } },
        createElement("p", { style: {
                color: 'white',
                fontSize: 13,
                lineHeight: '20px',
                margin: 0,
                padding: '10px 10px 9px',
                borderBottom: `1px solid ${COLORS.secondary}`,
            } },
            createElement("span", { style: { fontSize: 10 } }, "\u25BC"),
            " Actions"),
        createElement("input", { name: "filter", type: "search", style: {
                borderRadius: 0,
                background: '#11334c',
                marginTop: 0,
                border: 'none',
                color: 'white',
                padding: '10px 10px',
                width: '100%',
                boxSizing: 'border-box',
                fontSize: '14px',
            }, defaultValue: config.filterAction, onChange: event => {
                setFilterName(event.target.value.toLowerCase());
                saveSetting({ filterAction: event.target.value });
            }, placeholder: "Filter..." }),
        createElement("ul", { style: {
                listStyle: 'none',
                padding: 0,
                margin: 0,
                height: 'calc(100vh - 50px)',
                overflowY: 'auto',
            } }, actions
            .filter(data => ((data.name &&
            data.name.toLowerCase &&
            data.name.toLowerCase().includes(filterName)) ||
            (!data.name && !filterName) ||
            filterName === '') &&
            data.name)
            .map(({ name }, index) => (createElement("li", { style: {
                fontSize: 13,
                padding: 0,
            }, key: `${name}${index}` },
            createElement("button", { style: {
                    margin: 0,
                    padding: 10,
                    background: 'none',
                    color: 'white',
                    border: 'none',
                    display: 'block',
                    width: '100%',
                    textAlign: 'left',
                    borderRadius: 0,
                    borderBottom: stateIndex === index
                        ? '1px solid #ec5990'
                        : `1px solid ${COLORS.secondary}`,
                    textTransform: 'initial',
                }, onClick: () => {
                    setStateIndex(index);
                } }, name || 'unknown')))))));
};

function DevToolStorage({ setLoadPanel, isBrowser }) {
    return (createElement("div", { style: {
            color: 'white',
            position: 'absolute',
            top: 40,
            right: 0,
            width: 450,
            margin: 0,
            padding: 10,
            background: COLORS.primary,
            fontSize: 12,
            boxSizing: 'border-box',
            zIndex: Z_INDEX.second,
            overflowY: 'auto',
            height: 'calc(100vh - 50px)',
            overflowX: 'hidden',
        } },
        createElement("ul", { style: {
                padding: 0,
                margin: 0,
                listStyle: 'none',
                fontSize: 14,
                lineHeight: 1.5,
            } }, isBrowser && Object.entries(window.localStorage).map(([key, value], index) => (createElement("li", { key: `${key}${index}` },
            createElement("button", { style: {
                    padding: 10,
                    margin: '0 0 20px',
                    width: '100%',
                    textAlign: 'left',
                    background: 'none',
                    color: 'white',
                    border: `1px solid ${COLORS.secondary}`,
                    overflowWrap: 'break-word',
                }, onClick: () => {
                    if (window.confirm('Are you sure to load state?')) {
                        window.sessionStorage.setItem(
                        // @ts-ignore
                        window['STATE_MACHINE_NAME'], value);
                    }
                } }, key))))),
        createElement("button", { style: {
                margin: 0,
                borderRadius: '4px',
                padding: '10px',
                width: '100%',
            }, onClick: () => setLoadPanel(false) }, "Go Back")));
}

function drillData(originalData, keys) {
    let data = originalData;
    let tempData;
    for (let key in keys) {
        tempData = data;
        const result = data[keys[key]];
        if ((result && Array.isArray(result) && !result.length) ||
            (typeof result === 'object' && !Object.keys(result).length) ||
            result === '') {
            delete tempData[keys[key]];
        }
    }
}
function search(data, find, keys = [], originalData) {
    if (!originalData)
        originalData = data;
    for (let key in data) {
        const result = data[key];
        const lowerCaseKey = key.toLowerCase();
        const findLowerCase = find.toLowerCase();
        if (lowerCaseKey === findLowerCase ||
            lowerCaseKey.startsWith(findLowerCase) ||
            lowerCaseKey.includes(findLowerCase)) ;
        else if (Array.isArray(result)) {
            delete data[key];
        }
        else if (typeof result === 'object') {
            search(result, find, [...(keys || []), key], originalData);
        }
        else {
            delete data[key];
            drillData(originalData, keys);
        }
    }
    return data;
}

const clone = require('lodash.clonedeep');
let ReactJson = (props) => createElement("div", Object.assign({}, props));
if (typeof window !== 'undefined' && typeof document !== 'undefined') {
    ReactJson = require('react-json-view').default;
}
const buttonStyle = {
    margin: '0 10px 0 0',
    padding: '5px 10px',
    display: 'inline',
    fontSize: '12px',
    border: 'none',
    borderRadius: '2px',
};
const toggleStyle = {
    borderRadius: 0,
    display: 'inline',
    padding: 0,
    margin: 0,
    width: 20,
    height: 20,
    top: 0,
    marginRight: 10,
    border: 0,
};
var DevToolStateTree = ({ setPanel, isLoadPanelShow, setLoadPanel, state, setExpand, isCollapse, closePanel, stateIndex, actions, config, panelPosition, isBrowser, }) => {
    const collapse = () => {
        const expandValue = !isCollapse;
        setExpand(expandValue);
        saveSetting({ isCollapse: expandValue });
    };
    const [filterValue, setFilterValue] = useState$1(config.searchTerm);
    let data = ((stateIndex === -1 ? actions[actions.length - 1] : actions[stateIndex]) ||
        {}).state;
    if (filterValue)
        data = search(clone(data), filterValue);
    return (createElement("section", null,
        isLoadPanelShow && (createElement(DevToolStorage, { setLoadPanel: setLoadPanel, isBrowser: isBrowser })),
        createElement("h3", { style: {
                fontWeight: 'lighter',
                color: 'white',
                fontSize: 12,
                padding: 10,
                lineHeight: '20px',
                margin: '0 0 10px 0',
                borderBottom: `1px solid ${COLORS.secondary}`,
            } },
            "\u2646 Little State Machine",
            createElement("span", { style: { marginRight: 20, float: 'right', display: 'flex' } },
                createElement("button", { onClick: () => {
                        setPanel('right');
                        saveSetting({ panelPosition: 'right' });
                    }, style: Object.assign(Object.assign({}, toggleStyle), { borderRight: '6px solid #ec5990' }) }),
                createElement("button", { onClick: () => {
                        setPanel('bottom');
                        saveSetting({ panelPosition: 'bottom' });
                    }, style: Object.assign(Object.assign({}, toggleStyle), { borderBottom: '6px solid #ec5990' }) }))),
        createElement("section", { style: {
                marginLeft: 10,
            } },
            createElement("button", { onClick: () => {
                    const name = prompt('💁🏻‍♀️ Give it a name.');
                    if (name) {
                        window.localStorage.setItem(name, JSON.stringify(state));
                    }
                }, style: buttonStyle }, "Save"),
            createElement("button", { style: buttonStyle, onClick: () => setLoadPanel(!isLoadPanelShow) }, "Load"),
            createElement("button", { style: buttonStyle, onClick: () => {
                    collapse();
                } }, isCollapse ? 'Expand' : 'Collapse'),
            createElement("button", { style: buttonStyle, onClick: () => {
                    // @ts-ignore
                    window.STATE_MACHINE_RESET();
                } }, "Reset")),
        createElement("button", { style: {
                color: 'white',
                position: 'absolute',
                top: -5,
                right: 0,
                padding: 10,
                appearance: 'none',
                background: 'none',
                fontSize: 26,
                border: 0,
                margin: 0,
                lineHeight: '22px',
            }, "aria-label": "close panel", onClick: () => {
                if (isLoadPanelShow) {
                    setLoadPanel(false);
                }
                else {
                    closePanel();
                }
            } }, "\u00D7"),
        createElement("section", { style: { padding: '10px 0px 10px 10px' } },
            createElement("input", { name: "filter", style: {
                    borderRadius: 0,
                    background: '#11334c',
                    marginTop: 10,
                    border: 0,
                    color: 'white',
                    padding: '10px 10px',
                    boxSizing: 'border-box',
                    fontSize: '14px',
                    width: 'calc(100% + 10px)',
                    margin: '0 -10px 10px',
                }, type: "search", placeholder: "Search...", defaultValue: config.searchTerm, onChange: e => {
                    setFilterValue(e.target.value);
                    saveSetting({ searchTerm: e.target.value });
                } }),
            isBrowser && (createElement(ReactJson, { src: data, theme: "harmonic", iconStyle: "square", enableClipboard: false, collapsed: isCollapse, displayObjectSize: false, displayDataTypes: false, indentWidth: 2, style: Object.assign({ fontSize: 12, overflow: 'auto' }, (isBrowser
                    ? {
                        height: !panelPosition || panelPosition === 'right'
                            ? `calc(${window.screen.height - 275}px)`
                            : `calc(${window.innerHeight * 0.4 - 140}px)`,
                    }
                    : {})) })))));
};

const cloneDeep = require('lodash.clonedeep');
const { useState } = React;
let actions = [];
let previousStateIndex = -1;
let previousIsLoadPanelShow = false;
const config = typeof window !== 'undefined' && typeof document !== 'undefined'
    ? // @ts-ignore
        JSON.parse(window.localStorage.getItem(STATE_MACHINE_DEV_TOOL_CONFIG) ||
            '{"isCollapse": false, "isClose": true}')
    : {
        isCollapse: false,
        isClose: true,
        searchTerm: '',
        filterAction: '',
        panelPosition: 'right',
        mouseMoveDiff: 0,
    };
let previousMouseMoveDiff = config.mouseMoveDiff;
let previousIsCollapse = config.isCollapse;
let previousIsClose = config.isClose;
const DevTool = ({ buttonBottom, buttonTop, iconSize, }) => {
    const { state } = useStateMachine();
    const [isClose, setClose] = useState(config.isClose);
    const [isLoadPanelShow, setLoadPanel] = useState(false);
    const [isCollapse, setExpand] = useState(config.isCollapse);
    const [stateIndex, setStateIndex] = useState(-1);
    const [panelPosition, setPanel] = useState(config.panelPosition);
    const rootRef = useRef(null);
    const mouseDownOriginalX = useRef(0);
    const isBrowser = typeof window !== 'undefined';
    const [mouseMoveDiff, setMouseMoveDiff] = useState(config.mouseMoveDiff);
    const closePanel = () => {
        const closeValue = !isClose;
        setClose(closeValue);
        saveSetting({ isClose: closeValue });
    };
    if (previousStateIndex === stateIndex &&
        previousIsClose === isClose &&
        previousIsLoadPanelShow === isLoadPanelShow &&
        previousIsCollapse === isCollapse &&
        previousMouseMoveDiff === mouseMoveDiff) {
        actions.push({
            // @ts-ignore
            name: window['__STATE_MACHINE_ACTION_NAME__'],
            state: cloneDeep(state),
        });
    }
    previousStateIndex = stateIndex;
    previousIsClose = isClose;
    previousIsLoadPanelShow = isLoadPanelShow;
    previousIsCollapse = isCollapse;
    previousMouseMoveDiff = mouseMoveDiff;
    const move = (e) => {
        setMouseMoveDiff(e.clientX - mouseDownOriginalX.current);
    };
    const mouseup = (e) => {
        if (rootRef && rootRef.current) {
            rootRef.current.style.userSelect = 'auto';
        }
        saveSetting({ mouseMoveDiff: e.clientX - mouseDownOriginalX.current });
        document.removeEventListener('mousemove', move);
    };
    const onMouseDown = (e) => {
        if (rootRef && rootRef.current) {
            rootRef.current.style.userSelect = 'none';
        }
        mouseDownOriginalX.current = e.clientX;
        document.addEventListener('mouseup', mouseup);
        document.addEventListener('mousemove', move);
    };
    useEffect(() => {
        return () => {
            document.removeEventListener('mouseup', mouseup);
            document.removeEventListener('mousemove', move);
        };
        // eslint-disable-next-line
    }, []);
    return (createElement("div", { style: {
            fontFamily: `BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif`,
        }, ref: rootRef },
        createElement("button", { style: {
                position: 'fixed',
                top: buttonTop || 0,
                right: 0,
                bottom: buttonBottom || 'auto',
                width: iconSize || 40,
                height: iconSize || 40,
                margin: 0,
                padding: 10,
                background: COLORS.primary,
                color: 'white',
                zIndex: Z_INDEX.top,
                fontSize: 15,
                lineHeight: '15px',
                border: 0,
                borderRadius: 0,
            }, onClick: () => closePanel() }, "\u2646"),
        createElement(Animate, { play: isClose, end: { transform: 'translateX(102%)' }, easeType: "ease-out", duration: 0.3, render: ({ style }) => (createElement("div", { style: Object.assign(Object.assign({ zIndex: Z_INDEX.top, position: 'fixed', right: 0, width: 600, height: '100vh', background: COLORS.primary, display: 'grid', gridTemplateColumns: '3px 150px minmax(100px, 1fr)', boxShadow: '0 0 8px 3px #080808' }, (panelPosition === 'bottom'
                    ? {
                        bottom: 0,
                        width: '100%',
                        height: '40%',
                    }
                    : {
                        top: 0,
                        width: 600 - (mouseMoveDiff || 0),
                    })), style) },
                createElement("div", { style: {
                        cursor: 'ew-resize',
                    }, onMouseDown: onMouseDown }),
                createElement(DevToolActionPanel, { config: config, stateIndex: stateIndex, actions: actions, setStateIndex: setStateIndex }),
                createElement(DevToolStateTree, Object.assign({}, {
                    isBrowser,
                    setPanel,
                    panelPosition,
                    closePanel,
                    config,
                    actions,
                    isLoadPanelShow,
                    setLoadPanel,
                    state,
                    setExpand,
                    isCollapse,
                    setClose,
                    stateIndex,
                })))) })));
};

export { DevTool };
//# sourceMappingURL=index.js.map
